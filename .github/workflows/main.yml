name: Sparkle Release Automation (Proven)

on:
  workflow_dispatch:
    inputs:
      version_increment:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
        - major
        - minor
        - patch
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string

env:
  projname: DockDoor

jobs:
  release:
    name: "Create Sparkle Release"
    runs-on: macos-latest
    
    steps:
    - name: Checkout ejbills/DockDoor repository
      uses: actions/checkout@v4
      with:
        repository: ejbills/DockDoor
        ref: main
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Install the Apple certificate
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Clean up certificate file
        rm $CERTIFICATE_PATH
        
    - name: Get current version and calculate new version
      id: version
      run: |
        # Get current version from project
        CURRENT_VERSION=$(grep -o 'MARKETING_VERSION = [0-9.]*' ${{ env.projname }}.xcodeproj/project.pbxproj | head -1 | cut -d' ' -f3 | tr -d ';')
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
        
        # Calculate new version
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        case "${{ github.event.inputs.version_increment }}" in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
        
    - name: Update version in project
      run: |
        NEW_VERSION="${{ steps.version.outputs.new }}"
        echo "Updating version to: $NEW_VERSION"
        
        # Update version in project.pbxproj
        sed -i '' "s/MARKETING_VERSION = [0-9.]*/MARKETING_VERSION = $NEW_VERSION/g" ${{ env.projname }}.xcodeproj/project.pbxproj
        sed -i '' "s/CURRENT_PROJECT_VERSION = [0-9.]*/CURRENT_PROJECT_VERSION = $NEW_VERSION/g" ${{ env.projname }}.xcodeproj/project.pbxproj
        
        # Verify the update worked
        echo "Updated versions:"
        grep "MARKETING_VERSION = " ${{ env.projname }}.xcodeproj/project.pbxproj | head -2
        
    - name: Build and archive
      env:
        DEVELOPMENT_TEAM: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        echo "Building and archiving..."
        
        # Build and archive - let Xcode handle the signing automatically
        xcodebuild clean archive \
          -project ${{ env.projname }}.xcodeproj \
          -scheme ${{ env.projname }} \
          -configuration Release \
          -archivePath ${{ env.projname }}.xcarchive \
          DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM"
          
    - name: Export app
      env:
        DEVELOPMENT_TEAM: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        echo "Exporting app..."
        
        # Create ExportOptions.plist for development export
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>development</string>
            <key>teamID</key>
            <string>$DEVELOPMENT_TEAM</string>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>stripSwiftSymbols</key>
            <true/>
        </dict>
        </plist>
        EOF
        
        # Export the archive
        xcodebuild -exportArchive \
          -archivePath "${{ env.projname }}.xcarchive" \
          -exportPath Release \
          -exportOptionsPlist ExportOptions.plist
          
    - name: Zip app for Sparkle
      run: |
        echo "Creating zip for Sparkle..."
        cd Release
        ditto -c -k --sequesterRsrc --keepParent ${{ env.projname }}.app ${{ env.projname }}.zip
        cd ..
        
        # Verify zip was created
        ls -la Release/
        
    - name: Generate release notes for Sparkle
      run: |
        echo "Generating release notes..."
        
        # Create release notes
        if [ -n "${{ github.event.inputs.release_notes }}" ]; then
          echo "${{ github.event.inputs.release_notes }}" > latest_changes.md
        else
          echo "Version ${{ steps.version.outputs.new }}" > latest_changes.md
          echo "" >> latest_changes.md
          echo "- Bug fixes and improvements" >> latest_changes.md
        fi
        
        # Convert to HTML for Sparkle (simple conversion)
        echo "<h1>${{ env.projname }} ${{ steps.version.outputs.new }}</h1>" > Release/${{ env.projname }}.html
        echo "<ul>" >> Release/${{ env.projname }}.html
        
        # Convert markdown-style bullet points to HTML
        sed -n 's/^- \(.*\)/<li>\1<\/li>/p' latest_changes.md >> Release/${{ env.projname }}.html
        
        echo "</ul>" >> Release/${{ env.projname }}.html
        
        echo "Generated HTML release notes:"
        cat Release/${{ env.projname }}.html
        
    - name: Update Sparkle appcast
      env:
        SPARKLE_PRIVATE_KEY: ${{ secrets.SPARKLE_PRIVATE_KEY }}
      run: |
        echo "Updating Sparkle appcast..."
        
        # Save private key to temporary file for Sparkle tool
        if [ -n "$SPARKLE_PRIVATE_KEY" ]; then
          echo "$SPARKLE_PRIVATE_KEY" > sparkle_private_key.pem
          
          # Generate signed appcast with Sparkle's tool
          ./Sparkle/generate_appcast \
            --ed-key-file sparkle_private_key.pem \
            --download-url-prefix "https://github.com/ejbills/DockDoor/releases/download/v${{ steps.version.outputs.new }}/" \
            --link "https://github.com/ejbills/DockDoor/releases" \
            -o appcast.xml \
            Release/
          
          # Clean up private key
          rm sparkle_private_key.pem
          
          echo "✅ Generated signed appcast"
        else
          echo "⚠️ SPARKLE_PRIVATE_KEY not set, generating unsigned appcast"
          
          # Fallback: manual appcast generation
          DMG_SIZE=$(stat -f%z Release/${{ env.projname }}.zip)
          CURRENT_DATE=$(date -u +"%a, %d %b %Y %H:%M:%S %z")
          
          cat > appcast.xml << EOF
        <?xml version="1.0" standalone="yes"?>
        <rss xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle" version="2.0">
            <channel>
                <title>${{ env.projname }}</title>
                <item>
                    <title>${{ steps.version.outputs.new }}</title>
                    <pubDate>$CURRENT_DATE</pubDate>
                    <sparkle:releaseNotesLink>https://github.com/ejbills/DockDoor/releases/tag/v${{ steps.version.outputs.new }}</sparkle:releaseNotesLink>
                    <sparkle:version>${{ steps.version.outputs.new }}</sparkle:version>
                    <sparkle:shortVersionString>${{ steps.version.outputs.new }}</sparkle:shortVersionString>
                    <sparkle:minimumSystemVersion>13.0</sparkle:minimumSystemVersion>
                    <enclosure url="https://github.com/ejbills/DockDoor/releases/download/v${{ steps.version.outputs.new }}/${{ env.projname }}.zip" length="$DMG_SIZE" type="application/zip"/>
                </item>
            </channel>
        </rss>
        EOF
        fi
        
        echo "Generated appcast:"
        cat appcast.xml
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: "DockDoor v${{ steps.version.outputs.new }}"
        tag_name: "v${{ steps.version.outputs.new }}"
        body_path: latest_changes.md
        files: |
          Release/${{ env.projname }}.zip
        draft: false
        prerelease: false
        
    - name: Commit changes
      run: |
        echo "Committing version bump and appcast changes..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add and commit changes
        git add ${{ env.projname }}.xcodeproj/project.pbxproj appcast.xml
        git commit -m "Release version v${{ steps.version.outputs.new }}

        🤖 Generated with [Claude Code](https://claude.ai/code)
        
        Co-Authored-By: Claude <noreply@anthropic.com>" || echo "No changes to commit"
        
        # Push changes
        git push origin || echo "Nothing to push"
        
    - name: Cleanup
      if: always()
      run: |
        # Clean up any remaining sensitive files
        rm -f sparkle_private_key.pem
        rm -f ExportOptions.plist
        rm -rf Release
        rm -f latest_changes.md
        
        # Clean up keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        if [ -f "$KEYCHAIN_PATH" ]; then
          security delete-keychain "$KEYCHAIN_PATH" || true
        fi
        
    - name: Summary
      run: |
        echo "🎉 Release completed successfully!"
        echo "📦 Version: v${{ steps.version.outputs.new }}"
        echo "🔗 Release URL: https://github.com/ejbills/DockDoor/releases/tag/v${{ steps.version.outputs.new }}"
        echo "📡 Appcast updated with Sparkle signatures"
